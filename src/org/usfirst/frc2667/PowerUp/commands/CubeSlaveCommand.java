// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2667.PowerUp.commands;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;

import org.usfirst.frc2667.PowerUp.Robot;

/**
 *
 */
public class CubeSlaveCommand extends CommandGroup {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	private boolean isClose;
	private String gameData;
	private boolean shouldStop;
	private boolean goForScale = false;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public CubeSlaveCommand() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    	whereDoesThisGo();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Choosing "CubeLeft" or "CubeRight" will determine whether the robot is on the same side as our switch

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	
    }
    
    // Decides where to push the cube in auto, I don't know whether to put this in init or execute
    protected void whereDoesThisGo() {
    	gameData = Robot.getFMSData();
    	if (gameData == null)
    		System.out.println("gameData is null!!!!!!!!!!!!!!!!!!!!!!!");
    	isClose = Robot.isItClose();
    	if (isClose) {
    		//If this doesn't trigger the switch, add logic to go slight to either side
    		//Drive to vision target
    		addSequential(new DriveStraight());
    	}
    	if (!isClose) {
    		// If goForScale is false, always go for the switch. Default false.
    		if (!goForScale) {
    			if (gameData.charAt(0) == 'R') {
    				addSequential(new DriveStraight());
    			}
    			if (gameData.charAt(0) == 'L') {
    				addSequential(new DriveStraight());
    			}
    		}
    		// Being able to coordinate with other teams on whether to take the scale may be useful
    		/*if (goForScale) {
    			if (gameData.charAt(0) == 'R' && gameData.charAt(1) == 'L') {
    				//Deliver to the scale on the left side?
    			}
    			if (gameData.charAt(0) == 'R' && gameData.charAt(1) == 'R') {
    				//Deliver cube to enemy switch on left side?
    			}
    			if (gameData.charAt(0) == 'L' && gameData.charAt(1) == 'R') {
    				//Deliver to the scale on the right side?
    			}
    			if (gameData.charAt(0) == 'L' && gameData.charAt(1) == 'L') {
    				//Deliver to the enemy switch on the right side?
    			} */
    		}
    	}
    	
    	
    	
    		
    		
    
    
    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
}
