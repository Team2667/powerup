// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2667.PowerUp;

import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.AnalogPotentiometer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static WPI_TalonSRX driveTrainLeftFront;
    public static WPI_TalonSRX driveTrainLeftRear;
    public static WPI_TalonSRX driveTrainRightFront;
    public static WPI_TalonSRX driveTrainRightRear;
    public static AnalogInput driveTrainDistanceSensor;
    public static Spark cubeGrabGrabWindow;
    public static Spark cubeGrabLiftWindow;
    public static DigitalInput cubeGrabUpperLimitSwitch;
    public static DigitalInput cubeGrabLowerLimitSwitch;
    public static AnalogPotentiometer cubeGrabPotentiometer;
    public static SpeedController sideLiftSideLiftLeft;
    public static SpeedController sideLiftSideLiftRight;
    public static Servo sideLiftSideDropLeft;
    public static Servo sideLiftSideDropRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DifferentialDrive driveTrain;
    public static int kSlotIdx = 0;
    public static int kPIDLoopIdx = 0;
    public static int kTimeoutMs = 10;
    public static ADXRS450_Gyro gyro;
    public static Spark liftSpinner;

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainLeftFront = new WPI_TalonSRX(1);
        
        
        driveTrainLeftRear = new WPI_TalonSRX(2);
        
        
        driveTrainRightFront = new WPI_TalonSRX(3);
        
        
        driveTrainRightRear = new WPI_TalonSRX(4);
        
        
        driveTrainDistanceSensor = new AnalogInput(1);
        LiveWindow.addSensor("DriveTrain", "DistanceSensor", driveTrainDistanceSensor);
        
        cubeGrabGrabWindow = new Spark(4);
        
        
        cubeGrabLiftWindow = new Spark(5);
        
        
        cubeGrabUpperLimitSwitch = new DigitalInput(1);
        LiveWindow.addSensor("CubeGrab", "UpperLimitSwitch", cubeGrabUpperLimitSwitch);
        
        cubeGrabLowerLimitSwitch = new DigitalInput(0);
        LiveWindow.addSensor("CubeGrab", "LowerLimitSwitch", cubeGrabLowerLimitSwitch);
        
        cubeGrabPotentiometer = new AnalogPotentiometer(0, 270.0, 0.0);
        LiveWindow.addSensor("CubeGrab", "Potentiometer", cubeGrabPotentiometer);
        
        sideLiftSideLiftLeft = new Spark(0);
        LiveWindow.addActuator("SideLift", "SideLiftLeft", (Spark) sideLiftSideLiftLeft);
        sideLiftSideLiftLeft.setInverted(false);
        sideLiftSideLiftRight = new Spark(1);
        LiveWindow.addActuator("SideLift", "SideLiftRight", (Spark) sideLiftSideLiftRight);
        sideLiftSideLiftRight.setInverted(false);
        sideLiftSideDropLeft = new Servo(2);
        LiveWindow.addActuator("SideLift", "SideDropLeft", sideLiftSideDropLeft);
        
        sideLiftSideDropRight = new Servo(3);
        LiveWindow.addActuator("SideLift", "SideDropRight", sideLiftSideDropRight);
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        
        gyro = new ADXRS450_Gyro();
        driveTrainLeftRear.follow(driveTrainLeftFront);
        driveTrainRightRear.follow(driveTrainRightFront);
        liftSpinner = new Spark(6);
        LiveWindow.addActuator("CubeGrab", "Lift Spinner", liftSpinner);
        
        //driveTrainLeftFront.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, kPIDLoopIdx, kTimeoutMs);
        //driveTrainRightFront.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, kPIDLoopIdx, kTimeoutMs);
        
        DifferentialDrive m_drive = new DifferentialDrive(driveTrainLeftFront, driveTrainRightFront);
        driveTrain = m_drive;
    }
}
