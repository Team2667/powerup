// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2667.PowerUp;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc2667.PowerUp.commands.*;
import org.usfirst.frc2667.PowerUp.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {
	
	private static String gameData;
	private static boolean isClose;
    SendableChooser chooser = new SendableChooser();
    private static double startTime = 0;
    

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static CubeGrab cubeGrab;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Command theCommand;
    public static SideLiftLeft sideLiftLeft;
    public static SideLiftRight sideLiftRight;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
    	System.out.println("Inside RobotInit!!!!!!!!!!!!!!!!!");
        RobotMap.init();
        RobotMap.gyro.calibrate();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        cubeGrab = new CubeGrab();
        sideLiftLeft = new SideLiftLeft();
        sideLiftRight = new SideLiftRight();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        chooser.addDefault("PICK A DIFFERENT COMMAND!!!!!!!!!!", new DriveStraight());
        chooser.addObject("Place Cube Left", new LeftSideStart());
        chooser.addObject("Place Cube Right", new RightSideStart());
        chooser.addObject("Middle Start", new CenterStart());
        SmartDashboard.putData("AUTO MODE CHOOSER:", chooser);
        
    }
    
    public static boolean isEndGame() {
    	//if (System.currentTimeMillis()/1000 - startTime >= 90)
    		return true;
    	//else return false;
    }
    
    public static void setFMSData(String data) {
    	gameData = data;
    }
    
    public static String getFMSData() {
    	return gameData;
    }
    
    public static void setPosition(boolean set) {
    	isClose = set;
    }
    
    public static boolean isItClose() {
    	return isClose;
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
    	String data;
		data = DriverStation.getInstance().getGameSpecificMessage();
		if (data == null)
			System.out.println("No data from FMS!!");
		setFMSData(data);
      //  autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
    	theCommand = (Command) chooser.getSelected();
        if (theCommand != null) theCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (theCommand != null) theCommand.cancel();
        startTime = System.currentTimeMillis()/1000;
    }

    /**
     * This function is called periodically during operator control
     */
    
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("Distance Sensor", driveTrain.getDistanceSensor());
    }
    
    public void test() {
    	
    }
}
